// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/payment/v1/payment.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetCompanyName()); l < 1 || l > 50 {
		err := CreatePaymentRequestValidationError{
			field:  "CompanyName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 50 {
		err := CreatePaymentRequestValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if l := utf8.RuneCountInString(m.GetAccountNumber()); l < 1 || l > 20 {
		err := CreatePaymentRequestValidationError{
			field:  "AccountNumber",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on GetAccountByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByUserIDRequestMultiError, or nil if none found.
func (m *GetAccountByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccountNumber()); l < 1 || l > 50 {
		err := GetAccountByUserIDRequestValidationError{
			field:  "AccountNumber",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCurrency() != "" {

		if utf8.RuneCountInString(m.GetCurrency()) != 3 {
			err := GetAccountByUserIDRequestValidationError{
				field:  "Currency",
				reason: "value length must be 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetAccountByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetAccountByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountByUserIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAccountByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByUserIDRequestMultiError) AllErrors() []error { return m }

// GetAccountByUserIDRequestValidationError is the validation error returned by
// GetAccountByUserIDRequest.Validate if the designated constraints aren't met.
type GetAccountByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByUserIDRequestValidationError) ErrorName() string {
	return "GetAccountByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByUserIDRequestValidationError{}

// Validate checks the field values on GetAccountByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountByUserIDResponseMultiError, or nil if none found.
func (m *GetAccountByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBalance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountByUserIDResponseValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountByUserIDResponseValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBalance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountByUserIDResponseValidationError{
				field:  "Balance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for AccountNumber

	if len(errors) > 0 {
		return GetAccountByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetAccountByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetAccountByUserIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAccountByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountByUserIDResponseMultiError) AllErrors() []error { return m }

// GetAccountByUserIDResponseValidationError is the validation error returned
// by GetAccountByUserIDResponse.Validate if the designated constraints aren't met.
type GetAccountByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountByUserIDResponseValidationError) ErrorName() string {
	return "GetAccountByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountByUserIDResponseValidationError{}

// Validate checks the field values on TransferBetweenUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferBetweenUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBetweenUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferBetweenUsersRequestMultiError, or nil if none found.
func (m *TransferBetweenUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBetweenUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAmount() == nil {
		err := TransferBetweenUsersRequestValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetAmount(); a != nil {

	}

	if m.GetSenderId() < 1 {
		err := TransferBetweenUsersRequestValidationError{
			field:  "SenderId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSenderAccountId() < 1 {
		err := TransferBetweenUsersRequestValidationError{
			field:  "SenderAccountId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SenderAccountNumber

	if m.GetRecipientId() < 1 {
		err := TransferBetweenUsersRequestValidationError{
			field:  "RecipientId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRecipientAccountId() < 1 {
		err := TransferBetweenUsersRequestValidationError{
			field:  "RecipientAccountId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RecipientAccountNumber

	if l := utf8.RuneCountInString(m.GetRecipientName()); l < 1 || l > 50 {
		err := TransferBetweenUsersRequestValidationError{
			field:  "RecipientName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransferBetweenUsersRequestMultiError(errors)
	}

	return nil
}

// TransferBetweenUsersRequestMultiError is an error wrapping multiple
// validation errors returned by TransferBetweenUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type TransferBetweenUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBetweenUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBetweenUsersRequestMultiError) AllErrors() []error { return m }

// TransferBetweenUsersRequestValidationError is the validation error returned
// by TransferBetweenUsersRequest.Validate if the designated constraints
// aren't met.
type TransferBetweenUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBetweenUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBetweenUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBetweenUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBetweenUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBetweenUsersRequestValidationError) ErrorName() string {
	return "TransferBetweenUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBetweenUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBetweenUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBetweenUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBetweenUsersRequestValidationError{}

// Validate checks the field values on TransferBetweenUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferBetweenUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBetweenUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferBetweenUsersResponseMultiError, or nil if none found.
func (m *TransferBetweenUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBetweenUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferBetweenUsersResponseValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferBetweenUsersResponseValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferBetweenUsersResponseValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecipientId

	// no validation rules for RecipientName

	// no validation rules for RecipientAccountNumber

	if len(errors) > 0 {
		return TransferBetweenUsersResponseMultiError(errors)
	}

	return nil
}

// TransferBetweenUsersResponseMultiError is an error wrapping multiple
// validation errors returned by TransferBetweenUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type TransferBetweenUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBetweenUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBetweenUsersResponseMultiError) AllErrors() []error { return m }

// TransferBetweenUsersResponseValidationError is the validation error returned
// by TransferBetweenUsersResponse.Validate if the designated constraints
// aren't met.
type TransferBetweenUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBetweenUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBetweenUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBetweenUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBetweenUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBetweenUsersResponseValidationError) ErrorName() string {
	return "TransferBetweenUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBetweenUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBetweenUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBetweenUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBetweenUsersResponseValidationError{}

// Validate checks the field values on GetPaymentsHistoryByAccountIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPaymentsHistoryByAccountIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsHistoryByAccountIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPaymentsHistoryByAccountIDRequestMultiError, or nil if none found.
func (m *GetPaymentsHistoryByAccountIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsHistoryByAccountIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountNumber

	if val := m.GetLimit(); val < 0 || val > 500 {
		err := GetPaymentsHistoryByAccountIDRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := GetPaymentsHistoryByAccountIDRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSortBy() != "" {

		if _, ok := _GetPaymentsHistoryByAccountIDRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
			err := GetPaymentsHistoryByAccountIDRequestValidationError{
				field:  "SortBy",
				reason: "value must be in list [create_at amount]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetSort() != "" {

		if _, ok := _GetPaymentsHistoryByAccountIDRequest_Sort_InLookup[m.GetSort()]; !ok {
			err := GetPaymentsHistoryByAccountIDRequestValidationError{
				field:  "Sort",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetPaymentsHistoryByAccountIDRequestMultiError(errors)
	}

	return nil
}

// GetPaymentsHistoryByAccountIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPaymentsHistoryByAccountIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentsHistoryByAccountIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsHistoryByAccountIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsHistoryByAccountIDRequestMultiError) AllErrors() []error { return m }

// GetPaymentsHistoryByAccountIDRequestValidationError is the validation error
// returned by GetPaymentsHistoryByAccountIDRequest.Validate if the designated
// constraints aren't met.
type GetPaymentsHistoryByAccountIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsHistoryByAccountIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsHistoryByAccountIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsHistoryByAccountIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsHistoryByAccountIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsHistoryByAccountIDRequestValidationError) ErrorName() string {
	return "GetPaymentsHistoryByAccountIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsHistoryByAccountIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsHistoryByAccountIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsHistoryByAccountIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsHistoryByAccountIDRequestValidationError{}

var _GetPaymentsHistoryByAccountIDRequest_SortBy_InLookup = map[string]struct{}{
	"create_at": {},
	"amount":    {},
}

var _GetPaymentsHistoryByAccountIDRequest_Sort_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetPaymentsHistoryByAccountIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPaymentsHistoryByAccountIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsHistoryByAccountIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPaymentsHistoryByAccountIDResponseMultiError, or nil if none found.
func (m *GetPaymentsHistoryByAccountIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsHistoryByAccountIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentsHistoryByAccountIDResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentsHistoryByAccountIDResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentsHistoryByAccountIDResponseValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaymentsHistoryByAccountIDResponseMultiError(errors)
	}

	return nil
}

// GetPaymentsHistoryByAccountIDResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPaymentsHistoryByAccountIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentsHistoryByAccountIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsHistoryByAccountIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsHistoryByAccountIDResponseMultiError) AllErrors() []error { return m }

// GetPaymentsHistoryByAccountIDResponseValidationError is the validation error
// returned by GetPaymentsHistoryByAccountIDResponse.Validate if the
// designated constraints aren't met.
type GetPaymentsHistoryByAccountIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsHistoryByAccountIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsHistoryByAccountIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsHistoryByAccountIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsHistoryByAccountIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsHistoryByAccountIDResponseValidationError) ErrorName() string {
	return "GetPaymentsHistoryByAccountIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsHistoryByAccountIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsHistoryByAccountIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsHistoryByAccountIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsHistoryByAccountIDResponseValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccountNumber

	if m.GetAmount() == nil {
		err := PaymentValidationError{
			field:  "Amount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetAmount(); a != nil {

	}

	if l := utf8.RuneCountInString(m.GetCompanyName()); l < 1 || l > 50 {
		err := PaymentValidationError{
			field:  "CompanyName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 50 {
		err := PaymentValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on GetAccountsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsByUserIDRequestMultiError, or nil if none found.
func (m *GetAccountsByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetAccountsByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetAccountsByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetAccountsByUserIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAccountsByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsByUserIDRequestMultiError) AllErrors() []error { return m }

// GetAccountsByUserIDRequestValidationError is the validation error returned
// by GetAccountsByUserIDRequest.Validate if the designated constraints aren't met.
type GetAccountsByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsByUserIDRequestValidationError) ErrorName() string {
	return "GetAccountsByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsByUserIDRequestValidationError{}

// Validate checks the field values on GetAccountsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsByUserIDResponseMultiError, or nil if none found.
func (m *GetAccountsByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsByUserIDResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsByUserIDResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsByUserIDResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountsByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetAccountsByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetAccountsByUserIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAccountsByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsByUserIDResponseMultiError) AllErrors() []error { return m }

// GetAccountsByUserIDResponseValidationError is the validation error returned
// by GetAccountsByUserIDResponse.Validate if the designated constraints
// aren't met.
type GetAccountsByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsByUserIDResponseValidationError) ErrorName() string {
	return "GetAccountsByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsByUserIDResponseValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBalance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountValidationError{
					field:  "Balance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBalance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountValidationError{
				field:  "Balance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for AccountNumber

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}
