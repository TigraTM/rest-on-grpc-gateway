// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/payment/v1/payment.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSum() == nil {
		err := CreatePaymentRequestValidationError{
			field:  "Sum",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetSum(); a != nil {

	}

	if l := utf8.RuneCountInString(m.GetCompanyName()); l < 1 || l > 50 {
		err := CreatePaymentRequestValidationError{
			field:  "CompanyName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 50 {
		err := CreatePaymentRequestValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on GetBalanceByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceByUserIDRequestMultiError, or nil if none found.
func (m *GetBalanceByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.GetCurrency() != "" {

		if utf8.RuneCountInString(m.GetCurrency()) != 3 {
			err := GetBalanceByUserIDRequestValidationError{
				field:  "Currency",
				reason: "value length must be 3 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if len(errors) > 0 {
		return GetBalanceByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetBalanceByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetBalanceByUserIDRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBalanceByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceByUserIDRequestMultiError) AllErrors() []error { return m }

// GetBalanceByUserIDRequestValidationError is the validation error returned by
// GetBalanceByUserIDRequest.Validate if the designated constraints aren't met.
type GetBalanceByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceByUserIDRequestValidationError) ErrorName() string {
	return "GetBalanceByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceByUserIDRequestValidationError{}

// Validate checks the field values on GetBalanceByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceByUserIDResponseMultiError, or nil if none found.
func (m *GetBalanceByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetSum()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBalanceByUserIDResponseValidationError{
					field:  "Sum",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBalanceByUserIDResponseValidationError{
					field:  "Sum",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSum()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBalanceByUserIDResponseValidationError{
				field:  "Sum",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetBalanceByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetBalanceByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetBalanceByUserIDResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBalanceByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceByUserIDResponseMultiError) AllErrors() []error { return m }

// GetBalanceByUserIDResponseValidationError is the validation error returned
// by GetBalanceByUserIDResponse.Validate if the designated constraints aren't met.
type GetBalanceByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceByUserIDResponseValidationError) ErrorName() string {
	return "GetBalanceByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceByUserIDResponseValidationError{}

// Validate checks the field values on TransferBetweenUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferBetweenUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBetweenUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferBetweenUsersRequestMultiError, or nil if none found.
func (m *TransferBetweenUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBetweenUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSum() == nil {
		err := TransferBetweenUsersRequestValidationError{
			field:  "Sum",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetSum(); a != nil {

	}

	// no validation rules for SenderId

	// no validation rules for RecipientId

	if l := utf8.RuneCountInString(m.GetRecipientName()); l < 1 || l > 50 {
		err := TransferBetweenUsersRequestValidationError{
			field:  "RecipientName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransferBetweenUsersRequestMultiError(errors)
	}

	return nil
}

// TransferBetweenUsersRequestMultiError is an error wrapping multiple
// validation errors returned by TransferBetweenUsersRequest.ValidateAll() if
// the designated constraints aren't met.
type TransferBetweenUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBetweenUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBetweenUsersRequestMultiError) AllErrors() []error { return m }

// TransferBetweenUsersRequestValidationError is the validation error returned
// by TransferBetweenUsersRequest.Validate if the designated constraints
// aren't met.
type TransferBetweenUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBetweenUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBetweenUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBetweenUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBetweenUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBetweenUsersRequestValidationError) ErrorName() string {
	return "TransferBetweenUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBetweenUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBetweenUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBetweenUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBetweenUsersRequestValidationError{}

// Validate checks the field values on TransferBetweenUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferBetweenUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferBetweenUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferBetweenUsersResponseMultiError, or nil if none found.
func (m *TransferBetweenUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferBetweenUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSum()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransferBetweenUsersResponseValidationError{
					field:  "Sum",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransferBetweenUsersResponseValidationError{
					field:  "Sum",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSum()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransferBetweenUsersResponseValidationError{
				field:  "Sum",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecipientId

	// no validation rules for RecipientName

	if len(errors) > 0 {
		return TransferBetweenUsersResponseMultiError(errors)
	}

	return nil
}

// TransferBetweenUsersResponseMultiError is an error wrapping multiple
// validation errors returned by TransferBetweenUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type TransferBetweenUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferBetweenUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferBetweenUsersResponseMultiError) AllErrors() []error { return m }

// TransferBetweenUsersResponseValidationError is the validation error returned
// by TransferBetweenUsersResponse.Validate if the designated constraints
// aren't met.
type TransferBetweenUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferBetweenUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferBetweenUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferBetweenUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferBetweenUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferBetweenUsersResponseValidationError) ErrorName() string {
	return "TransferBetweenUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferBetweenUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferBetweenUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferBetweenUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferBetweenUsersResponseValidationError{}

// Validate checks the field values on GetPaymentsHistoryByUserIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPaymentsHistoryByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsHistoryByUserIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPaymentsHistoryByUserIDRequestMultiError, or nil if none found.
func (m *GetPaymentsHistoryByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsHistoryByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if val := m.GetLimit(); val < 1 || val > 500 {
		err := GetPaymentsHistoryByUserIDRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := GetPaymentsHistoryByUserIDRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetPaymentsHistoryByUserIDRequest_SortBy_InLookup[m.GetSortBy()]; !ok {
		err := GetPaymentsHistoryByUserIDRequestValidationError{
			field:  "SortBy",
			reason: "value must be in list [create_at sum]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetPaymentsHistoryByUserIDRequest_Sort_InLookup[m.GetSort()]; !ok {
		err := GetPaymentsHistoryByUserIDRequestValidationError{
			field:  "Sort",
			reason: "value must be in list [asc desc]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPaymentsHistoryByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetPaymentsHistoryByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPaymentsHistoryByUserIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentsHistoryByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsHistoryByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsHistoryByUserIDRequestMultiError) AllErrors() []error { return m }

// GetPaymentsHistoryByUserIDRequestValidationError is the validation error
// returned by GetPaymentsHistoryByUserIDRequest.Validate if the designated
// constraints aren't met.
type GetPaymentsHistoryByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsHistoryByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsHistoryByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsHistoryByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsHistoryByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsHistoryByUserIDRequestValidationError) ErrorName() string {
	return "GetPaymentsHistoryByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsHistoryByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsHistoryByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsHistoryByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsHistoryByUserIDRequestValidationError{}

var _GetPaymentsHistoryByUserIDRequest_SortBy_InLookup = map[string]struct{}{
	"create_at": {},
	"sum":       {},
}

var _GetPaymentsHistoryByUserIDRequest_Sort_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetPaymentsHistoryByUserIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPaymentsHistoryByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsHistoryByUserIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPaymentsHistoryByUserIDResponseMultiError, or nil if none found.
func (m *GetPaymentsHistoryByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsHistoryByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentsHistoryByUserIDResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentsHistoryByUserIDResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentsHistoryByUserIDResponseValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaymentsHistoryByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetPaymentsHistoryByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPaymentsHistoryByUserIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentsHistoryByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsHistoryByUserIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsHistoryByUserIDResponseMultiError) AllErrors() []error { return m }

// GetPaymentsHistoryByUserIDResponseValidationError is the validation error
// returned by GetPaymentsHistoryByUserIDResponse.Validate if the designated
// constraints aren't met.
type GetPaymentsHistoryByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsHistoryByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsHistoryByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsHistoryByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsHistoryByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsHistoryByUserIDResponseValidationError) ErrorName() string {
	return "GetPaymentsHistoryByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsHistoryByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsHistoryByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsHistoryByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsHistoryByUserIDResponseValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentValidationError{
					field:  "CreateAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "CreateAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSum() == nil {
		err := PaymentValidationError{
			field:  "Sum",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetSum(); a != nil {

	}

	if l := utf8.RuneCountInString(m.GetCompanyName()); l < 1 || l > 50 {
		err := PaymentValidationError{
			field:  "CompanyName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 50 {
		err := PaymentValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}
