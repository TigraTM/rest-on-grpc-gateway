syntax = "proto3";

package api.proto.payment.v1;

option go_package = "rest-on-grpc-gateway/api/proto/payment/v1;pb";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "google/type/decimal.proto";
import "google/protobuf/timestamp.proto";

// PaymentAPI service to work with payment.
service PaymentAPI {
  // Create Payments. Payment can be created with positive or negative value.
  // Payments are made only in rubles(RUB).
  //
  // ```
  // Example request:
  //    sum: '99.99'
  //    company_name: 'AppStore'
  //    category: 'supermarkets'
  //    user_id: 1
  // ```
  //
  // ```
  // Example response:
  //    empty
  // Specific codes:
  //    * codes.InvalidArgument
  rpc CreatePayment (CreatePaymentRequest) returns (CreatePaymentResponse) {
    option (google.api.http) = {post: "/payment/api/v1/payment", body: "*"};
  };
  // Get user balance by user ID.
  // By default the balance is given in rubles, if you want to convert the amount into another currency,
  // pass in query parameter ?currency={another_currency} another currency.
  // The name of the other currency should consist of 3 letters
  //
  // ```
  // Example request:
  //    id: 1
  //    currency: USD
  // ```
  //
  // ```
  // Example response:
  //    id: 1
  //    sum: '99.99'
  //    currency: USD
  // ```
  //
  // Specific codes:
  //    * codes.InvalidArgument
  //    * codes.NotFound
  rpc GetBalanceByUserID (GetBalanceByUserIDRequest) returns (GetBalanceByUserIDResponse) {
    option (google.api.http) = {get: "/payment/api/v1/payment/{user_id}"};
  };
  // Transferring money between users.
  // Transferring money are made only in rubles(RUB).
  //
  // ```
  // Example request:
  //    sum: '99.99'
  //    sender_id: 1
  //    recipient_id: 2
  //    recipient_name: 'Artem'
  // ```
  //
  // ```
  // Example response:
  //    sum: '99.99'
  //    recipient_id: 2
  //    recipient_name: 'Artem'
  // ```
  //
  // Specific codes:
  //    * codes.InvalidArgument
  //    * codes.NotFound
  rpc TransferBetweenUsers (TransferBetweenUsersRequest) returns (TransferBetweenUsersResponse) {
    option (google.api.http) = {post: "/payment/api/v1/payment/transfer", body: "*"};
  };
  // Get payments history by user id.
  // Query params:
  // - limit (default = 100)
  // - offset (default = 0)
  // - sort (only 'sum' and 'create_at', default = 'creat_at')
  // - order_by (only 'asc' or 'desc', default = 'desc')
  //
  // ```
  // Example request:
  //    user_id: 1
  //    limit: 5
  //    offset: 0
  //    sort: create_at
  //    order_by: desc
  // ```
  //
  // ```
  // Example response:
  //    id: 1
  //    create_at: // FIXME: fix example time
  //    sum: '99.99'
  //    company_name: 2
  //    category: 'Artem'
  //    total: 1
  // ```
  //
  // Specific codes:
  //    * codes.InvalidArgument
  //    * codes.NotFound
  rpc GetPaymentsHistoryByUserID (GetPaymentsHistoryByUserIDRequest) returns (GetPaymentsHistoryByUserIDResponse) {
    option (google.api.http) = {get: "/payment/api/v1/payment/{user_id}/history"};
  };
}

message CreatePaymentRequest {
    google.type.Decimal sum  = 1 [(validate.rules).any.required = true];
    string     company_name  = 2 [(validate.rules).string = {min_len: 1, max_len: 50}];
    string         category  = 3 [(validate.rules).string = {min_len: 1, max_len: 50}];
    int64           user_id  = 4;
}

message CreatePaymentResponse {}

message GetBalanceByUserIDRequest {
  int64   user_id = 1;
  string currency = 2 [(validate.rules).string = {ignore_empty: true, len: 3}];
}

message GetBalanceByUserIDResponse {
  int64           user_id = 1;
  google.type.Decimal sum = 2;
  string         currency = 3;
}

message TransferBetweenUsersRequest {
  google.type.Decimal sum = 1 [(validate.rules).any.required = true];
  int64         sender_id = 2;
  int64      recipient_id = 3;
  string   recipient_name = 4 [(validate.rules).string = {min_len: 1, max_len: 50}];
}

message TransferBetweenUsersResponse {
  google.type.Decimal sum = 1;
  int64      recipient_id = 2;
  string   recipient_name = 3;
}

message GetPaymentsHistoryByUserIDRequest {
  int64    user_id = 1;
  int64      limit = 2 [(validate.rules).int64 = {gte: 1, lte: 500}];
  int64     offset = 3 [(validate.rules).int64 = {gte: 0}];
  string      sort = 4 [(validate.rules).string = {in: ["create_at", "sum"]}];
  string  order_by = 5 [(validate.rules).string = {in: ["asc", "desc"]}];
}

message GetPaymentsHistoryByUserIDResponse {
  repeated Payment payments = 1;
  int64               total = 2;
}

message Payment {
  int64                            id = 1;
  google.protobuf.Timestamp create_at = 2;
  google.type.Decimal             sum = 3 [(validate.rules).any.required = true];;
  string                 company_name = 4 [(validate.rules).string = {min_len: 1, max_len: 50}];
  string                     category = 5 [(validate.rules).string = {min_len: 1, max_len: 50}];
}