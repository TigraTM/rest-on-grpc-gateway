// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/proto/payment/v1/payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentExternalAPIClient is the client API for PaymentExternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentExternalAPIClient interface {
	// Specific codes:
	//    * codes.InvalidArgument
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	// Get user account balance by user ID.
	// By default the balance is given in rubles, if you want to convert the amount into another currency,
	// pass in query parameter ?currency={another_currency} another currency.
	// The name of the other currency should consist of 3 letters
	//
	// ```
	// Example request:
	//    account_number: '123' // path param
	//    currency: 'USD'       // query param
	//    user_id: 1            // query param
	// ```
	//
	// ```
	// Example response:
	//    user_id: 1
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    currency: 'USD'
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	//    * codes.NotFound
	GetAccountByAccountNumber(ctx context.Context, in *GetAccountByUserIDRequest, opts ...grpc.CallOption) (*GetAccountByUserIDResponse, error)
	// Transferring money between users.
	// Transferring money are made only in rubles(RUB).
	// If you try to transfer money to a user who does not exist or to a non-existent account, an error will be returned.
	//
	// ```
	// Example request:
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    sender_id: 1
	//    sender_account_id: 1
	//    sender_account_number: '123'
	//    recipient_id: 2
	//    recipient_account_id: 1
	//    recipient_account_number: '123'
	//    recipient_name: 'Artem'
	// ```
	//
	// ```
	// Example response:
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    recipient_id: 2
	//    recipient_name: 'Artem'
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	//    * codes.NotFound
	TransferBetweenUsers(ctx context.Context, in *TransferBetweenUsersRequest, opts ...grpc.CallOption) (*TransferBetweenUsersResponse, error)
	// Get payments history by account id.
	// Query params:
	// - limit (default = 100)
	// - offset (default = 0)
	// - sort (only 'sum' and 'create_at', default = 'creat_at')
	// - order_by (only 'asc' or 'desc', default = 'desc')
	//
	// ```
	// Example request:
	//    account_id: 1      // path params
	//    limit: 5        // query params
	//    offset: 0       // query params
	//    sort: create_at // query params
	//    order_by: desc  // query params
	// ```
	//
	// ```
	// Example response:
	//    account_number: 1 // path param
	//    create_at: '2022-05-09T11:12:01.934970Z'
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    company_name: 2
	//    category: 'Artem'
	//    total: 1
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	//    * codes.NotFound
	GetPaymentsHistoryByAccountNumber(ctx context.Context, in *GetPaymentsHistoryByAccountIDRequest, opts ...grpc.CallOption) (*GetPaymentsHistoryByAccountIDResponse, error)
	//  Get accounts by user id. Without paging and filters.
	//
	// ```
	// Example request:
	//    user_id: 1 // query params
	// ```
	//
	// ```
	// Example response:
	//    balance: {
	// 		  'value': '1000'
	// 	  }
	//    currency: 'RUB'
	//    account_number: '123'
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	GetAccountsByUserID(ctx context.Context, in *GetAccountsByUserIDRequest, opts ...grpc.CallOption) (*GetAccountsByUserIDResponse, error)
	// Returns all currencies with which you can make a balance conversion.
	//
	// ```
	// Example request:
	//    empty
	// ```
	//
	// ```
	// Example response:
	//    "symbols": {
	//    "AED": "United Arab Emirates Dirham",
	//    "AFN": "Afghan Afghani",
	//    "ALL": "Albanian Lek",
	//    "AMD": "Armenian Dram",
	//    [...]
	//    }
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	GetAllCurrencies(ctx context.Context, in *GetAllCurrenciesRequest, opts ...grpc.CallOption) (*GetAllCurrenciesResponse, error)
}

type paymentExternalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentExternalAPIClient(cc grpc.ClientConnInterface) PaymentExternalAPIClient {
	return &paymentExternalAPIClient{cc}
}

func (c *paymentExternalAPIClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.v1.PaymentExternalAPI/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentExternalAPIClient) GetAccountByAccountNumber(ctx context.Context, in *GetAccountByUserIDRequest, opts ...grpc.CallOption) (*GetAccountByUserIDResponse, error) {
	out := new(GetAccountByUserIDResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.v1.PaymentExternalAPI/GetAccountByAccountNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentExternalAPIClient) TransferBetweenUsers(ctx context.Context, in *TransferBetweenUsersRequest, opts ...grpc.CallOption) (*TransferBetweenUsersResponse, error) {
	out := new(TransferBetweenUsersResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.v1.PaymentExternalAPI/TransferBetweenUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentExternalAPIClient) GetPaymentsHistoryByAccountNumber(ctx context.Context, in *GetPaymentsHistoryByAccountIDRequest, opts ...grpc.CallOption) (*GetPaymentsHistoryByAccountIDResponse, error) {
	out := new(GetPaymentsHistoryByAccountIDResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.v1.PaymentExternalAPI/GetPaymentsHistoryByAccountNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentExternalAPIClient) GetAccountsByUserID(ctx context.Context, in *GetAccountsByUserIDRequest, opts ...grpc.CallOption) (*GetAccountsByUserIDResponse, error) {
	out := new(GetAccountsByUserIDResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.v1.PaymentExternalAPI/GetAccountsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentExternalAPIClient) GetAllCurrencies(ctx context.Context, in *GetAllCurrenciesRequest, opts ...grpc.CallOption) (*GetAllCurrenciesResponse, error) {
	out := new(GetAllCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.v1.PaymentExternalAPI/GetAllCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentExternalAPIServer is the server API for PaymentExternalAPI service.
// All implementations should embed UnimplementedPaymentExternalAPIServer
// for forward compatibility
type PaymentExternalAPIServer interface {
	// Specific codes:
	//    * codes.InvalidArgument
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	// Get user account balance by user ID.
	// By default the balance is given in rubles, if you want to convert the amount into another currency,
	// pass in query parameter ?currency={another_currency} another currency.
	// The name of the other currency should consist of 3 letters
	//
	// ```
	// Example request:
	//    account_number: '123' // path param
	//    currency: 'USD'       // query param
	//    user_id: 1            // query param
	// ```
	//
	// ```
	// Example response:
	//    user_id: 1
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    currency: 'USD'
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	//    * codes.NotFound
	GetAccountByAccountNumber(context.Context, *GetAccountByUserIDRequest) (*GetAccountByUserIDResponse, error)
	// Transferring money between users.
	// Transferring money are made only in rubles(RUB).
	// If you try to transfer money to a user who does not exist or to a non-existent account, an error will be returned.
	//
	// ```
	// Example request:
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    sender_id: 1
	//    sender_account_id: 1
	//    sender_account_number: '123'
	//    recipient_id: 2
	//    recipient_account_id: 1
	//    recipient_account_number: '123'
	//    recipient_name: 'Artem'
	// ```
	//
	// ```
	// Example response:
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    recipient_id: 2
	//    recipient_name: 'Artem'
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	//    * codes.NotFound
	TransferBetweenUsers(context.Context, *TransferBetweenUsersRequest) (*TransferBetweenUsersResponse, error)
	// Get payments history by account id.
	// Query params:
	// - limit (default = 100)
	// - offset (default = 0)
	// - sort (only 'sum' and 'create_at', default = 'creat_at')
	// - order_by (only 'asc' or 'desc', default = 'desc')
	//
	// ```
	// Example request:
	//    account_id: 1      // path params
	//    limit: 5        // query params
	//    offset: 0       // query params
	//    sort: create_at // query params
	//    order_by: desc  // query params
	// ```
	//
	// ```
	// Example response:
	//    account_number: 1 // path param
	//    create_at: '2022-05-09T11:12:01.934970Z'
	//    amount: {
	// 		  'value': '1000'
	// 	  }
	//    company_name: 2
	//    category: 'Artem'
	//    total: 1
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	//    * codes.NotFound
	GetPaymentsHistoryByAccountNumber(context.Context, *GetPaymentsHistoryByAccountIDRequest) (*GetPaymentsHistoryByAccountIDResponse, error)
	//  Get accounts by user id. Without paging and filters.
	//
	// ```
	// Example request:
	//    user_id: 1 // query params
	// ```
	//
	// ```
	// Example response:
	//    balance: {
	// 		  'value': '1000'
	// 	  }
	//    currency: 'RUB'
	//    account_number: '123'
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	GetAccountsByUserID(context.Context, *GetAccountsByUserIDRequest) (*GetAccountsByUserIDResponse, error)
	// Returns all currencies with which you can make a balance conversion.
	//
	// ```
	// Example request:
	//    empty
	// ```
	//
	// ```
	// Example response:
	//    "symbols": {
	//    "AED": "United Arab Emirates Dirham",
	//    "AFN": "Afghan Afghani",
	//    "ALL": "Albanian Lek",
	//    "AMD": "Armenian Dram",
	//    [...]
	//    }
	// ```
	//
	// Specific codes:
	//    * codes.InvalidArgument
	GetAllCurrencies(context.Context, *GetAllCurrenciesRequest) (*GetAllCurrenciesResponse, error)
}

// UnimplementedPaymentExternalAPIServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentExternalAPIServer struct {
}

func (UnimplementedPaymentExternalAPIServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentExternalAPIServer) GetAccountByAccountNumber(context.Context, *GetAccountByUserIDRequest) (*GetAccountByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAccountNumber not implemented")
}
func (UnimplementedPaymentExternalAPIServer) TransferBetweenUsers(context.Context, *TransferBetweenUsersRequest) (*TransferBetweenUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBetweenUsers not implemented")
}
func (UnimplementedPaymentExternalAPIServer) GetPaymentsHistoryByAccountNumber(context.Context, *GetPaymentsHistoryByAccountIDRequest) (*GetPaymentsHistoryByAccountIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentsHistoryByAccountNumber not implemented")
}
func (UnimplementedPaymentExternalAPIServer) GetAccountsByUserID(context.Context, *GetAccountsByUserIDRequest) (*GetAccountsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByUserID not implemented")
}
func (UnimplementedPaymentExternalAPIServer) GetAllCurrencies(context.Context, *GetAllCurrenciesRequest) (*GetAllCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCurrencies not implemented")
}

// UnsafePaymentExternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentExternalAPIServer will
// result in compilation errors.
type UnsafePaymentExternalAPIServer interface {
	mustEmbedUnimplementedPaymentExternalAPIServer()
}

func RegisterPaymentExternalAPIServer(s grpc.ServiceRegistrar, srv PaymentExternalAPIServer) {
	s.RegisterService(&PaymentExternalAPI_ServiceDesc, srv)
}

func _PaymentExternalAPI_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentExternalAPIServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.v1.PaymentExternalAPI/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentExternalAPIServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentExternalAPI_GetAccountByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentExternalAPIServer).GetAccountByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.v1.PaymentExternalAPI/GetAccountByAccountNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentExternalAPIServer).GetAccountByAccountNumber(ctx, req.(*GetAccountByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentExternalAPI_TransferBetweenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBetweenUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentExternalAPIServer).TransferBetweenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.v1.PaymentExternalAPI/TransferBetweenUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentExternalAPIServer).TransferBetweenUsers(ctx, req.(*TransferBetweenUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentExternalAPI_GetPaymentsHistoryByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentsHistoryByAccountIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentExternalAPIServer).GetPaymentsHistoryByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.v1.PaymentExternalAPI/GetPaymentsHistoryByAccountNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentExternalAPIServer).GetPaymentsHistoryByAccountNumber(ctx, req.(*GetPaymentsHistoryByAccountIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentExternalAPI_GetAccountsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentExternalAPIServer).GetAccountsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.v1.PaymentExternalAPI/GetAccountsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentExternalAPIServer).GetAccountsByUserID(ctx, req.(*GetAccountsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentExternalAPI_GetAllCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentExternalAPIServer).GetAllCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.v1.PaymentExternalAPI/GetAllCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentExternalAPIServer).GetAllCurrencies(ctx, req.(*GetAllCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentExternalAPI_ServiceDesc is the grpc.ServiceDesc for PaymentExternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentExternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.payment.v1.PaymentExternalAPI",
	HandlerType: (*PaymentExternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentExternalAPI_CreatePayment_Handler,
		},
		{
			MethodName: "GetAccountByAccountNumber",
			Handler:    _PaymentExternalAPI_GetAccountByAccountNumber_Handler,
		},
		{
			MethodName: "TransferBetweenUsers",
			Handler:    _PaymentExternalAPI_TransferBetweenUsers_Handler,
		},
		{
			MethodName: "GetPaymentsHistoryByAccountNumber",
			Handler:    _PaymentExternalAPI_GetPaymentsHistoryByAccountNumber_Handler,
		},
		{
			MethodName: "GetAccountsByUserID",
			Handler:    _PaymentExternalAPI_GetAccountsByUserID_Handler,
		},
		{
			MethodName: "GetAllCurrencies",
			Handler:    _PaymentExternalAPI_GetAllCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/payment/v1/payment.proto",
}
