// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/proto/user/v1/user.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 40 {
		err := CreateUserRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) > 50 {
		err := CreateUserRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 100 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByIDRequestMultiError, or nil if none found.
func (m *GetUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserByIDRequestMultiError(errors)
	}

	return nil
}

// GetUserByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByIDRequestMultiError) AllErrors() []error { return m }

// GetUserByIDRequestValidationError is the validation error returned by
// GetUserByIDRequest.Validate if the designated constraints aren't met.
type GetUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIDRequestValidationError) ErrorName() string {
	return "GetUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIDRequestValidationError{}

// Validate checks the field values on GetUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByIDResponseMultiError, or nil if none found.
func (m *GetUserByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return GetUserByIDResponseMultiError(errors)
	}

	return nil
}

// GetUserByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByIDResponseMultiError) AllErrors() []error { return m }

// GetUserByIDResponseValidationError is the validation error returned by
// GetUserByIDResponse.Validate if the designated constraints aren't met.
type GetUserByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIDResponseValidationError) ErrorName() string {
	return "GetUserByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIDResponseValidationError{}

// Validate checks the field values on DeleteUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserByIDRequestMultiError, or nil if none found.
func (m *DeleteUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteUserByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserByIDRequestMultiError) AllErrors() []error { return m }

// DeleteUserByIDRequestValidationError is the validation error returned by
// DeleteUserByIDRequest.Validate if the designated constraints aren't met.
type DeleteUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserByIDRequestValidationError) ErrorName() string {
	return "DeleteUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserByIDRequestValidationError{}

// Validate checks the field values on DeleteUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserByIDResponseMultiError, or nil if none found.
func (m *DeleteUserByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserByIDResponseMultiError(errors)
	}

	return nil
}

// DeleteUserByIDResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserByIDResponseMultiError) AllErrors() []error { return m }

// DeleteUserByIDResponseValidationError is the validation error returned by
// DeleteUserByIDResponse.Validate if the designated constraints aren't met.
type DeleteUserByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserByIDResponseValidationError) ErrorName() string {
	return "DeleteUserByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserByIDResponseValidationError{}

// Validate checks the field values on UpdateUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIDRequestMultiError, or nil if none found.
func (m *UpdateUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 40 {
		err := UpdateUserByIDRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) > 50 {
		err := UpdateUserByIDRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UpdateUserByIDRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserByIDRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateUserByIDRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateUserByIDRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateUserByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIDRequestMultiError) AllErrors() []error { return m }

// UpdateUserByIDRequestValidationError is the validation error returned by
// UpdateUserByIDRequest.Validate if the designated constraints aren't met.
type UpdateUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIDRequestValidationError) ErrorName() string {
	return "UpdateUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIDRequestValidationError{}

// Validate checks the field values on UpdateUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIDResponseMultiError, or nil if none found.
func (m *UpdateUserByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Email

	if len(errors) > 0 {
		return UpdateUserByIDResponseMultiError(errors)
	}

	return nil
}

// UpdateUserByIDResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIDResponseMultiError) AllErrors() []error { return m }

// UpdateUserByIDResponseValidationError is the validation error returned by
// UpdateUserByIDResponse.Validate if the designated constraints aren't met.
type UpdateUserByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIDResponseValidationError) ErrorName() string {
	return "UpdateUserByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIDResponseValidationError{}

// Validate checks the field values on UpdateUserPasswordByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordByIDRequestMultiError, or nil if none found.
func (m *UpdateUserPasswordByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetOldPassword()); l < 8 || l > 100 {
		err := UpdateUserPasswordByIDRequestValidationError{
			field:  "OldPassword",
			reason: "value length must be between 8 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 8 || l > 100 {
		err := UpdateUserPasswordByIDRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 8 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserPasswordByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPasswordByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateUserPasswordByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordByIDRequestMultiError) AllErrors() []error { return m }

// UpdateUserPasswordByIDRequestValidationError is the validation error
// returned by UpdateUserPasswordByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateUserPasswordByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordByIDRequestValidationError) ErrorName() string {
	return "UpdateUserPasswordByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordByIDRequestValidationError{}

// Validate checks the field values on UpdateUserPasswordByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswordByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswordByIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserPasswordByIDResponseMultiError, or nil if none found.
func (m *UpdateUserPasswordByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswordByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserPasswordByIDResponseMultiError(errors)
	}

	return nil
}

// UpdateUserPasswordByIDResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPasswordByIDResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateUserPasswordByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswordByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswordByIDResponseMultiError) AllErrors() []error { return m }

// UpdateUserPasswordByIDResponseValidationError is the validation error
// returned by UpdateUserPasswordByIDResponse.Validate if the designated
// constraints aren't met.
type UpdateUserPasswordByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswordByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswordByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswordByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswordByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswordByIDResponseValidationError) ErrorName() string {
	return "UpdateUserPasswordByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswordByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswordByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswordByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswordByIDResponseValidationError{}
