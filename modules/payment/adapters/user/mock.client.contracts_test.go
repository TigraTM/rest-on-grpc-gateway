// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package user_test is a generated GoMock package.
package user_test

import (
	context "context"
	reflect "reflect"
	client "rest-on-grpc-gateway/modules/user/client"

	gomock "github.com/golang/mock/gomock"
)

// MockuserClient is a mock of userClient interface.
type MockuserClient struct {
	ctrl     *gomock.Controller
	recorder *MockuserClientMockRecorder
}

// MockuserClientMockRecorder is the mock recorder for MockuserClient.
type MockuserClientMockRecorder struct {
	mock *MockuserClient
}

// NewMockuserClient creates a new mock instance.
func NewMockuserClient(ctrl *gomock.Controller) *MockuserClient {
	mock := &MockuserClient{ctrl: ctrl}
	mock.recorder = &MockuserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserClient) EXPECT() *MockuserClientMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockuserClient) GetByID(ctx context.Context, userID int) (*client.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(*client.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserClientMockRecorder) GetByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserClient)(nil).GetByID), ctx, userID)
}
