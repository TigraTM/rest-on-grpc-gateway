// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package api_test is a generated GoMock package.
package api_test

import (
	context "context"
	reflect "reflect"
	domain "rest-on-grpc-gateway/modules/payment/internal/domain"
	filters "rest-on-grpc-gateway/modules/payment/internal/filters"

	gomock "github.com/golang/mock/gomock"
)

// Mockapplication is a mock of application interface.
type Mockapplication struct {
	ctrl     *gomock.Controller
	recorder *MockapplicationMockRecorder
}

// MockapplicationMockRecorder is the mock recorder for Mockapplication.
type MockapplicationMockRecorder struct {
	mock *Mockapplication
}

// NewMockapplication creates a new mock instance.
func NewMockapplication(ctrl *gomock.Controller) *Mockapplication {
	mock := &Mockapplication{ctrl: ctrl}
	mock.recorder = &MockapplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockapplication) EXPECT() *MockapplicationMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *Mockapplication) CreatePayment(ctx context.Context, userID int, payment domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, userID, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockapplicationMockRecorder) CreatePayment(ctx, userID, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*Mockapplication)(nil).CreatePayment), ctx, userID, payment)
}

// GetAccountByAccountNumber mocks base method.
func (m *Mockapplication) GetAccountByAccountNumber(ctx context.Context, userID int, accountNumber, currency string) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByAccountNumber", ctx, userID, accountNumber, currency)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByAccountNumber indicates an expected call of GetAccountByAccountNumber.
func (mr *MockapplicationMockRecorder) GetAccountByAccountNumber(ctx, userID, accountNumber, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByAccountNumber", reflect.TypeOf((*Mockapplication)(nil).GetAccountByAccountNumber), ctx, userID, accountNumber, currency)
}

// GetAccountsByUserID mocks base method.
func (m *Mockapplication) GetAccountsByUserID(ctx context.Context, userID int) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByUserID indicates an expected call of GetAccountsByUserID.
func (mr *MockapplicationMockRecorder) GetAccountsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByUserID", reflect.TypeOf((*Mockapplication)(nil).GetAccountsByUserID), ctx, userID)
}

// GetAllCurrencies mocks base method.
func (m *Mockapplication) GetAllCurrencies(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCurrencies", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCurrencies indicates an expected call of GetAllCurrencies.
func (mr *MockapplicationMockRecorder) GetAllCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCurrencies", reflect.TypeOf((*Mockapplication)(nil).GetAllCurrencies), ctx)
}

// GetPaymentHistoryByAccountID mocks base method.
func (m *Mockapplication) GetPaymentHistoryByAccountID(ctx context.Context, userID int, accountNumber string, paging, filter filters.FilterContract) ([]domain.Payment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentHistoryByAccountID", ctx, userID, accountNumber, paging, filter)
	ret0, _ := ret[0].([]domain.Payment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaymentHistoryByAccountID indicates an expected call of GetPaymentHistoryByAccountID.
func (mr *MockapplicationMockRecorder) GetPaymentHistoryByAccountID(ctx, userID, accountNumber, paging, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentHistoryByAccountID", reflect.TypeOf((*Mockapplication)(nil).GetPaymentHistoryByAccountID), ctx, userID, accountNumber, paging, filter)
}

// TransferBetweenUsers mocks base method.
func (m *Mockapplication) TransferBetweenUsers(ctx context.Context, transfer domain.Transfer) (*domain.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferBetweenUsers", ctx, transfer)
	ret0, _ := ret[0].(*domain.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferBetweenUsers indicates an expected call of TransferBetweenUsers.
func (mr *MockapplicationMockRecorder) TransferBetweenUsers(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferBetweenUsers", reflect.TypeOf((*Mockapplication)(nil).TransferBetweenUsers), ctx, transfer)
}
