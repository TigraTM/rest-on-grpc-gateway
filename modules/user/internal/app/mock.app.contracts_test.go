// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	reflect "reflect"
	domain "rest-on-grpc-gateway/modules/user/internal/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(ctx context.Context, newUser domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, newUser)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), ctx, newUser)
}

// DeleteUserByID mocks base method.
func (m *MockRepo) DeleteUserByID(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockRepoMockRecorder) DeleteUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockRepo)(nil).DeleteUserByID), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockRepo) GetUserByID(ctx context.Context, id int) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepoMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepo)(nil).GetUserByID), ctx, id)
}

// UpdateUserByID mocks base method.
func (m *MockRepo) UpdateUserByID(ctx context.Context, id int, name, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, id, name, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockRepoMockRecorder) UpdateUserByID(ctx, id, name, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockRepo)(nil).UpdateUserByID), ctx, id, name, email)
}

// UpdateUserPasswordByID mocks base method.
func (m *MockRepo) UpdateUserPasswordByID(ctx context.Context, id int, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPasswordByID", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPasswordByID indicates an expected call of UpdateUserPasswordByID.
func (mr *MockRepoMockRecorder) UpdateUserPasswordByID(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPasswordByID", reflect.TypeOf((*MockRepo)(nil).UpdateUserPasswordByID), ctx, id, password)
}

// MockPasswordHash is a mock of PasswordHash interface.
type MockPasswordHash struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHashMockRecorder
}

// MockPasswordHashMockRecorder is the mock recorder for MockPasswordHash.
type MockPasswordHashMockRecorder struct {
	mock *MockPasswordHash
}

// NewMockPasswordHash creates a new mock instance.
func NewMockPasswordHash(ctrl *gomock.Controller) *MockPasswordHash {
	mock := &MockPasswordHash{ctrl: ctrl}
	mock.recorder = &MockPasswordHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHash) EXPECT() *MockPasswordHashMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockPasswordHash) Compare(hashedPassword, password []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockPasswordHashMockRecorder) Compare(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockPasswordHash)(nil).Compare), hashedPassword, password)
}

// Hashing mocks base method.
func (m *MockPasswordHash) Hashing(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashing", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashing indicates an expected call of Hashing.
func (mr *MockPasswordHashMockRecorder) Hashing(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashing", reflect.TypeOf((*MockPasswordHash)(nil).Hashing), password)
}
